{
	"info": {
		"_postman_id": "8b985a1a-c633-4f9a-aaf7-2ec96496d115",
		"name": "TypeIO - auto runner",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login and set token",
			"item": [
				{
					"name": "Nodes - GET (verify authentication)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"token\", \"\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response;",
									"",
									"pm.test(\"Missing token results in failure\", function () {",
									"    pm.response.to.have.status(401);    // 401 Unauthorized",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/api/nodes/",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"nodes",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "TypeIO signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Create is successful (status == 201)\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"User in response has an ID\", function () {",
									"    pm.expect(jsonData.user).to.have.property('_id');",
									"});",
									"",
									"pm.test(\"User in response has correct information\", function () {",
									"    pm.expect(jsonData.user.firstName).to.eql(pm.environment.get(\"__first_name\"));",
									"    pm.expect(jsonData.user.lastName).to.eql(pm.environment.get(\"__last_name\"));",
									"    pm.expect(jsonData.user.email).to.eql(pm.environment.get(\"__email\"));",
									"",
									"});",
									"",
									"pm.test(\"_ENVIRONMENT_ sets `__user_id`\", function () {",
									"    pm.environment.set(\"__user_id\", jsonData.user._id);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const current_ts = new Date().getTime().toString().slice(0, 10); // in seconds (not milliseconds)",
									"pm.environment.set(\"__run_ts\", current_ts);",
									"",
									"pm.environment.set(\"__first_name\", `TypeIO${current_ts}`);",
									"pm.environment.set(\"__last_name\", `Tester${current_ts}`);",
									"pm.environment.set(\"__email\", `TypeIOTester${current_ts}@example.com`);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{__first_name}}\",\n    \"lastName\": \"{{__last_name}}\",\n    \"email\": \"{{__email}}\",\n    \"password\": \"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/auth/signup",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "TypeIO login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Authentication is successful (status == 200)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Athena | authentication returns an access_token\", function () {",
									"    pm.expect(jsonData).to.have.property('token');",
									"});",
									"",
									"pm.test(\"_ENVIRONMENT_ sets `__token`\", function () {",
									"    pm.environment.set(\"__token\", jsonData.token);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{__token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{__email}}\",\n    \"password\": \"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/auth/signin",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"auth",
								"signin"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Node - CRUD",
			"item": [
				{
					"name": "Node - create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Create is successful (status == 201)\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Node in response has an ID\", function () {",
									"    pm.expect(jsonData).to.have.property('_id');",
									"});",
									"",
									"pm.test(\"Node in response is owned by the user\", function () {",
									"    pm.expect(jsonData.owner).to.eql(pm.environment.get(\"__user_id\"));",
									"});",
									"",
									"pm.test(\"_ENVIRONMENT_ sets `__token`\", function () {",
									"    pm.environment.set(\"__node_id\", jsonData._id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "{{__token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"New Node {{__run_ts}}\",\n    \"type\": \"Document\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/nodes/",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"nodes",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Node - verify create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"GET is successful (status == 200)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Node in response has correct ID\", function () {",
									"    pm.expect(jsonData).to.have.property('_id');",
									"    pm.expect(jsonData._id).to.eql(pm.environment.get(\"__node_id\"));",
									"});",
									"",
									"pm.test(\"Node in response is owned by the user\", function () {",
									"    pm.expect(jsonData.owner).to.eql(pm.environment.get(\"__user_id\"));",
									"});",
									"",
									"pm.test(\"_ENVIRONMENT_ sets `__token`\", function () {",
									"    pm.environment.set(\"__node_id\", jsonData._id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{__token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "localhost:3000/api/nodes/{{__node_id}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"nodes",
								"{{__node_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Node - update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"GET is successful (status == 200)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"One node has been modified\", function () {",
									"    pm.expect(jsonData.nModified).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "token",
								"value": "{{__token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Updated Node {{__run_ts}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/api/nodes/{{__node_id}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"nodes",
								"{{__node_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Node - verify update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"GET is successful (status == 200)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Node in response has correct ID\", function () {",
									"    pm.expect(jsonData).to.have.property('_id');",
									"    pm.expect(jsonData._id).to.eql(pm.environment.get(\"__node_id\"));",
									"});",
									"",
									"pm.test(\"Node in response is owned by the user\", function () {",
									"    pm.expect(jsonData.owner).to.eql(pm.environment.get(\"__user_id\"));",
									"});",
									"",
									"pm.test(\"Node in response has updated title\", function () {",
									"    pm.expect(jsonData.title).to.eql(\"Updated Node \" + pm.environment.get(\"__run_ts\"));",
									"});",
									"",
									"",
									"pm.test(\"_ENVIRONMENT_ sets `__token`\", function () {",
									"    pm.environment.set(\"__node_id\", jsonData._id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{__token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "localhost:3000/api/nodes/{{__node_id}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"nodes",
								"{{__node_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Node - delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"GET is successful (status == 200)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"One node has been deleted\", function () {",
									"    pm.expect(jsonData.deletedCount).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{__token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "localhost:3000/api/nodes/{{__node_id}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"nodes",
								"{{__node_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Node - verify delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET is successful (status == 200)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{__token}}"
							}
						],
						"url": {
							"raw": "localhost:3000/api/nodes/{{__node_id}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"nodes",
								"{{__node_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "User - delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create is successful (status == 200)\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{__token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "localhost:3000/api/account",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"account"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}